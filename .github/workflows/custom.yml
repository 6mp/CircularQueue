#name: Custom
#
#on:
#  push:
#    branches: [ master ]
#  pull_request:
#    branches: [ master ]
#
#jobs:
#  linux:
#    name: ${{ matrix.compiler }}
#    runs-on: ubuntu-latest
#    strategy:
#      fail-fast: false
#      matrix:
#        compiler:
#          [gcc, clang]
#    steps:
#      - uses: actions/checkout@v2
#        env:
#          BUILD_TYPE: Release
#          CC: ${{ matrix.compiler }}
#  
#      - name: Configure CMake
#        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
#        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
#        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
#
#      - name: Build
#        # Build your program with the given configuration
#        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
#
#      - name: Test
#        working-directory: ${{github.workspace}}/build
#        # Execute tests defined by the CMake configuration.  
#        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#        run: ctest -C ${{env.BUILD_TYPE}}

name: Configurable Build Matrix

on: push
jobs:
  matrix_prep:
    runs-on: ubuntu-latest
    steps:
    - name: Set up GCC
      uses: egor-tensin/setup-gcc@v1
      with:
          version: 11
          platform: x64
          
    - name: Set up Clang
      uses: egor-tensin/setup-clang@v1
      with:
        version: 13
        platform: x64

  build-n-test:
    # By stating 'needs' here, the output of 'matrix_prep' is available to this job
    needs: matrix_prep
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        compiler:
          [g++, clang++]
    steps:
      - uses: actions/checkout@v2
        env:
          BUILD_TYPE: Release
          CC: ${{ matrix.compiler }}
  
      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Test
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.  
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{env.BUILD_TYPE}}
