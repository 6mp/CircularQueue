#name: Custom
#
#on:
#  push:
#    branches: [ master ]
#  pull_request:
#    branches: [ master ]
#
#jobs:
#  linux:
#    name: ${{ matrix.compiler }}
#    runs-on: ubuntu-latest
#    strategy:
#      fail-fast: false
#      matrix:
#        compiler:
#          [gcc, clang]
#    steps:
#      - uses: actions/checkout@v2
#        env:
#          BUILD_TYPE: Release
#          CC: ${{ matrix.compiler }}
#  
#      - name: Configure CMake
#        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
#        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
#        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
#
#      - name: Build
#        # Build your program with the given configuration
#        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
#
#      - name: Test
#        working-directory: ${{github.workspace}}/build
#        # Execute tests defined by the CMake configuration.  
#        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#        run: ctest -C ${{env.BUILD_TYPE}}

name: Configurable Build Matrix

on: push
jobs:
  matrix_prep:
    # Using a separate job and agent so as to be able to use tools like 'sed' and 'jq'
    runs-on: ubuntu-latest
    # Defining outputs of a job allows for easier consumption and use
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    # Checking out code as the set-matrix step utilizes a file named matrix_includes.json
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    # This step is explained more in a following section
    - id: set-matrix
      run: |
        branchName=$(echo '${{ github.ref }}' | sed 's,refs/heads/,,g')  
        matrix=$(jq --arg branchName "$branchName" 'map(. | select((.runOn==$branchName) or (.runOn=="always")) )' matrix_includes.json)                
        echo ::set-output name=matrix::{\"include\":$(echo $matrix)}\"
  build-n-test:
    # By stating 'needs' here, the output of 'matrix_prep' is available to this job
    needs: matrix_prep
    runs-on: ${{ matrix.runs_on }}
    strategy:
      # We need to convert the json string output into an object that the GitHub Workflow expects.
      # Thankfully, the json-schema for Workflows allows 'matrix' to be set to an expression.
      matrix: ${{fromJson(needs.matrix_prep.outputs.matrix)}}
    steps:
    # Output a configuration specific value as proof and as a sanity check
    - run: echo "Hello ${{ matrix.someValue }}"
